
---
title: Homework 8 - World Bank Analysis
---

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-TacoBell1Fan.git>


# Problem Background


```{python}
#| echo: false
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
  
```


```{python}
#| echo: false
run_sql_and_return_html(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")

```

```{python}
#| echo: false
# Make full copy of wdi_country (no filtering yet!)
execute_ddl(cnx, """
DROP TABLE IF EXISTS wdi_country;
CREATE TABLE wdi_country AS
SELECT * FROM world_bank_data.wdi_country;
""")
```

# Exercises


In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table?

```{python}
#| echo: false
# How many records are in the world_bank_data.wdi_country table?
# (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
SELECT COUNT(*) AS "Row Count"
FROM wdi_country;
""")

```

## Task 2

Explore the first 5 records in the country table.

```{python}
#| echo: false
## write out the first 10 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)

run_sql_and_return_html(cnx,"""
SELECT *
FROM wdi_country
LIMIT 5;
""")

```


## Task 3

List all non-countries.

```{python}
#| echo: false
## task 3
## Which records are NOT for countries, that is they're for regions or groups of countries.
## How can you tell?
## Once you figure it out, write a query to list all the non-countries
## (skills: select, where)

run_sql_and_return_html(cnx,"""
SELECT `Short Name`
FROM wdi_country
WHERE Region IS NULL OR Region = ''
ORDER BY `Short Name`;
""")
```

## Task 4

Create your own copy of WDI_Country containing just countries.

```{python}
#| echo: false
## task 4
## The WDI table clearly contains information for countries and non-countries
## using CREATE TABLE ... SELECT from WHERE syntax.
## Finally, below write a query to return the number
## of records in the new table.
## (skills: select, aggregate)

# drop table
execute_ddl(cnx,"""
DROP TABLE IF EXISTS wdi_country;
""")
```

```{python}
#| echo: false
# create table
execute_ddl(cnx,"""
CREATE TABLE wdi_country AS
SELECT *
FROM world_bank_data.wdi_country
WHERE NOT Region IS NULL;
""")
```

```{python}
#| echo: false
# show number of records
run_sql_and_return_html(cnx,"""
SELECT COUNT(*) AS "Country Count"
FROM wdi_country;
""")
```

## Task 5

According to the World Bank, in 2020 there were how many countries in the world?

```{python}
#| echo: false
## (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
SELECT COUNT(*) AS "Row Count"
FROM wdi_country;
""")

```

## Task 6

What are all unique values of region in the wdi_country table?

```{python}
#| echo: false
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)

run_sql_and_return_html(cnx,"""
SELECT DISTINCT Region
FROM wdi_country
ORDER BY Region;
""")

```

## Task 7

How many countries are in each region?

```{python}
#| echo: false
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
SELECT Region, COUNT(*) AS Country_Count
FROM wdi_country
GROUP BY Region
ORDER BY Country_Count DESC;
""")

```

## Task 8

List the country full names and regions for all countries in north america.

```{python}
#| echo: false
## List the country full names and regions for all countries in north america
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
SELECT Region, `Short Name`
FROM wdi_country
WHERE Region = 'North America'
ORDER BY `Short Name`;
""")

```

## Task 9

```{python}
#| echo: false
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)

run_sql_and_return_html(cnx,"""
SELECT Region, `Short Name`, `Long Name`
FROM wdi_country
WHERE `Short Name` = 'Qatar';
""")

```

## Task 10

```{python}
#| echo: false
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
SELECT `Country Code`, `Short Name`, `2-alpha code`, `WB-2 code`, Region
FROM wdi_country
WHERE `2-alpha code` != `WB-2 code`
ORDER BY `Short Name`;
""")

```

## Task 11

```{python}
#| echo: false
## Now, let's investigate the "income category" field.
## List the income categories and the number of countries in each
## income category in descending order of most countries to least.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
SELECT `Income Group`, COUNT(*) AS num_countries
FROM wdi_country
GROUP BY `Income Group`
ORDER BY num_countries DESC;
""")

```

## Task 12

```{python}
#| echo: false
## Mystery task.  Looking at the table from Task 11 (anything odd?) write the
## next obvious query based on the results in the table.
## At a minimum, your query should put country short name in the first column.
## you will be scored on the number of records returned and the value(s) 
## in the first column.

run_sql_and_return_html(cnx,"""
SELECT `Short Name`, Region, `Income Group`
FROM wdi_country
WHERE `Income Group` IS NULL
ORDER BY `Short Name`;
""")

```

## Task 13

```{python}
#| echo: false
## OK, this HAS to be an error. Let's make a assumption that the country 
## in question, because they are oil-rich, are "high income".  
## Write an update comment to correct the issue.
## NOTE - if you get this wrong, all subsequent tables will be wrong!

execute_ddl(cnx,"""
UPDATE wdi_country
SET `Income Group` = 'High income'
WHERE `Short Name` = 'Venezuela';
""")


```
```{python}
#| echo: false
## Now, display the country again to verify the change stuck!

run_sql_and_return_html(cnx,"""
SELECT `Short Name`, `Income Group`
FROM wdi_country
WHERE `Short Name` = 'Venezuela';
""")

```

## Task 14

```{python}
#| echo: false
## Write a single query that show the number of countries in each 
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
SELECT Region, `Income Group`, COUNT(*) AS num_countries
FROM wdi_country
GROUP BY Region, `Income Group`
ORDER BY Region, `Income Group`;
""")

```

## Task 15

```{python}
#| echo: false
## Examine the result from task 14. It would be really cool to
## present the results of this table in a 2-D form, with 
## columns for each income category (high, upper middle, lower middle, low, other)
## regions down the side, and the pair-wise count inside each cell.
## Using CASE statements, DO IT!  BE SURE to include the countries without
## an income category.

## HINT - your query should return 6 columns: the region name, one
## column for each of the income categories (e.g., High, Upper middle, etc.)
## and a column for the row totals.
## (skills: select, aggregate, group by, nested query)

run_sql_and_return_html(cnx,"""
SELECT 
    Region,
    SUM(CASE WHEN `Income Group` = 'High income' THEN 1 ELSE 0 END) AS High_Income,
    SUM(CASE WHEN `Income Group` = 'Upper middle income' THEN 1 ELSE 0 END) AS Upper_Middle_Income,
    SUM(CASE WHEN `Income Group` = 'Lower middle income' THEN 1 ELSE 0 END) AS Lower_Middle_Income,
    SUM(CASE WHEN `Income Group` = 'Low income' THEN 1 ELSE 0 END) AS Low_Income,
    SUM(CASE WHEN (`Income Group` IS NULL OR `Income Group` = '') THEN 1 ELSE 0 END) AS Other,
    COUNT(*) AS Total
FROM wdi_country
GROUP BY Region
ORDER BY Region;
""")

```

## Task 16

```{python}
#| echo: false
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries.

## Your query should return 3 columns, the number of 
## low-income countries, the region name and the income group

## PUT THE NUMBER FIRST! (use: count, region name, income group)
## (skills: select, aggregate, group by, nested query, order by, limit)

run_sql_and_return_html(cnx,"""
SELECT 
    COUNT(*) AS num_low_income_countries,
    Region,
    `Income Group`
FROM wdi_country
WHERE `Income Group` = 'Low income'
GROUP BY Region, `Income Group`
ORDER BY num_low_income_countries DESC
LIMIT 1;
""")

```

## Task 17

```{python}
#| echo: false
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands.
## For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)

run_sql_and_return_html(cnx,"""
SELECT `Country Code`, `Short Name`, Region, `Income Group`
FROM wdi_country
WHERE Region = (
    SELECT Region
    FROM wdi_country
    WHERE `Country Code` = 'MHL'
)
AND `Income Group` = (
    SELECT `Income Group`
    FROM wdi_country
    WHERE `Country Code` = 'MHL'
)
ORDER BY `Short Name`;
""")

```

## Task 18

```{python}
#| echo: false
## OK - let's raise the heat in the kitchen! Review the output from task 14.
## You'll see that some of the regions do not contain all of the income
## levels.  For example, the Europe & Central Asia region does not have
## any low income countries.
##
## CHALLENGE - using a SINGLE SQL statement, write a table that contains every
## combination of region and income category (including the missing '') values!
##
## THEN add a WHERE clause to only show the values that were missing from
## the original pairings!
##
## HINT - there should be AT MOST [# of regions]x[# of income cats] = 28
## rows in your final table, and there are 22 rows returned in the query
## in Task 14.  (FYI - I get 6 rows in my final table.)
## (skills: select, where, subqueries, joins)

run_sql_and_return_html(cnx,"""
WITH all_combinations AS (
    SELECT r.Region, i.`Income Group`
    FROM (SELECT DISTINCT Region FROM wdi_country) r
    CROSS JOIN (SELECT DISTINCT `Income Group` FROM wdi_country) i
),
existing_combinations AS (
    SELECT DISTINCT Region, `Income Group`
    FROM wdi_country
)
SELECT ac.Region, ac.`Income Group`
FROM all_combinations ac
LEFT JOIN existing_combinations ec
ON ac.Region = ec.Region AND ac.`Income Group` = ec.`Income Group`
WHERE ec.Region IS NULL
ORDER BY ac.Region, ac.`Income Group`;
""")

```

## Task 19

```{python}
#| echo: false
## Hot enough, yet?  Let's go for ghost-pepper HOT!  Now let's build some
## percentage tables.  For example, across the entire sample, what
## is the percentage of total countries in each income category?
##
## As a first step, build off the result from task 14 and create a table with
## six columns (region, income cat, country count, sum of countries in region,
## sum of countries by income and total sum countries).
##
## THEN, add a 7th column calculating the percent of total for each,
## region-income pair.
##
## actually calculating percentages and print out a table will be a
## slam dunk after this!
## (skills: select, where, subqueries, joins, aggregate functions)

run_sql_and_return_html(cnx,"""
WITH counts AS (
    SELECT Region, `Income Group`, COUNT(*) AS country_count
    FROM wdi_country
    GROUP BY Region, `Income Group`
),
region_totals AS (
    SELECT Region, SUM(country_count) AS region_total
    FROM counts
    GROUP BY Region
),
income_totals AS (
    SELECT `Income Group`, SUM(country_count) AS income_total
    FROM counts
    GROUP BY `Income Group`
),
total_countries AS (
    SELECT SUM(country_count) AS total
    FROM counts
)
SELECT c.Region,
       c.`Income Group`,
       c.country_count,
       r.region_total,
       i.income_total,
       t.total,
       ROUND(100.0 * c.country_count / t.total, 2) AS percent_of_total
FROM counts c
JOIN region_totals r ON c.Region = r.Region
JOIN income_totals i ON c.`Income Group` = i.`Income Group`
CROSS JOIN total_countries t
ORDER BY c.Region, c.`Income Group`;
""")


```

## Task 20

```{python}
#| echo: false
## SLAM DUNK TIME!  Using the resulting table CTEs from Task 19,
## print table similar to the table in Task 15, with Income group in the
## columns, Region in the rows and Percent of total in each cell of the table.

run_sql_and_return_html(cnx,"""
WITH base AS (
    SELECT Region, `Income Group`, COUNT(*) AS country_count
    FROM wdi_country
    GROUP BY Region, `Income Group`
),
total AS (
    SELECT SUM(country_count) AS total_countries
    FROM base
)
SELECT 
    Region,
    ROUND(SUM(CASE WHEN `Income Group` = 'High income' THEN country_count ELSE 0 END) * 100.0 / total_countries, 2) AS High_Income_Percent,
    ROUND(SUM(CASE WHEN `Income Group` = 'Upper middle income' THEN country_count ELSE 0 END) * 100.0 / total_countries, 2) AS Upper_Middle_Income_Percent,
    ROUND(SUM(CASE WHEN `Income Group` = 'Lower middle income' THEN country_count ELSE 0 END) * 100.0 / total_countries, 2) AS Lower_Middle_Income_Percent,
    ROUND(SUM(CASE WHEN `Income Group` = 'Low income' THEN country_count ELSE 0 END) * 100.0 / total_countries, 2) AS Low_Income_Percent,
    ROUND(SUM(CASE WHEN (`Income Group` IS NULL OR `Income Group` = '') THEN country_count ELSE 0 END) * 100.0 / total_countries, 2) AS Other_Percent
FROM base, total
GROUP BY Region, total_countries
ORDER BY Region;
""")

```

## Task 21

```{python}
#| echo: false
## ANOTHER DUNK!  Using the resulting table CTEs from Task 19,
## print a table listing the number, totals and percentage of countries
## by income category.

## (This is much simpler than task 20!)

run_sql_and_return_html(cnx,"""
WITH base AS (
    SELECT `Income Group`, COUNT(*) AS num_countries
    FROM wdi_country
    GROUP BY `Income Group`
),
total AS (
    SELECT SUM(num_countries) AS total_countries
    FROM base
)
SELECT 
    b.`Income Group`,
    b.num_countries,
    t.total_countries,
    ROUND(100.0 * b.num_countries / t.total_countries, 2) AS percent_of_total
FROM base b
CROSS JOIN total t
ORDER BY percent_of_total DESC;
""")

```


# Reflection

1. Reflect on the SQL skills you used throughout these exercises. Which skills do you feel most confident in, and which do you think need more practice? How has this assignment helped you build or reinforce specific SQL competencies?

In this assignment, I became more comfortable in writing queries involving SELECT, WHERE, GROUP BY, ORDER BY, and JOIN.
This assignment helped my understanding of breaking down a big problem into smaller queries, and being careful with handling NULL values, joins, and filtering when working with real-world data.

2. Problem-Solving Approach: Describe your approach to tackling the more complex tasks (like Tasks 18, 23, and 24). How did you break down these problems, and what steps did you take when you encountered challenges? How would you approach a similar problem differently in the future?

For the more complex tasks like Tasks 18–21, I broke the problem down into two phases, first creating small helper queries to understand the data better, and then building the final large query.In the future, I would draw diagrams to visualize relationships earlier in the process to avoid mistakes.

3. Learning Takeaways: Consider the overall learning experience from this assignment. What were the biggest takeaways about working with SQL for data analysis and transformation? How do you think these skills will apply in real-world scenarios or future coursework?

My takeaway is how powerful SQL is when working with large databases, especially when doing data transformations or pivots, and also writing efficient queries, and structuring CTEs cleanly are essential skills when working as a data analyst, or database engineer.


# README

::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::



